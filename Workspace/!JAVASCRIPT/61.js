'use strict';

function printOdd () {
    console.log('홀수');
}
function printEven () {
    console.log('짝수');
}
let identifyOddEven = function (num, odd, even) {
    (num % 2 == 1) ? odd() : even();
};
identifyOddEven(7, printOdd, printEven);
identifyOddEven(18, printOdd, printEven);

/* ==================================================================================================== */

/*
  < 함수 표현식(또는 화살표 함수)의 옳지 않은 사용 예 >

- 자바에서 익명 이너 객체나 람다식이 일회성 동작에 대한 단축 문법인것 처럼 js에서도
  일회성으로 사용되는 것이 아닌, 이처럼 반복적으로 동일한 호출을 해야하는 경우 중복
  호출 정의가 되므로 상기 예시(53 ~ 63행)와 같이 74행의 identifyOddEven함수 표현식
  내에서 외부에 미리 정의된 함수를 직접 호출하는 것이 효율적.
*/

/* ==================================================================================================== */

identifyOddEven = (num, odd, even) => {
    (num % 2 == 1) ? odd() : even();
};
identifyOddEven(
    7,
    () => console.log('홀수'),
    () => console.log('짝수')
);
identifyOddEven(
    18,
    () => console.log('홀수'),
    () => console.log('짝수')
);

// 위와 같은 람다식은 식입력 부분에서 중복이 여러번 발생하기 때문에 비효율적이라 할 수 있음

/* ==================================================================================================== */

/* 

람다식의 장점

1. 코드의 간결성 - 람다를 사용하면 불필요한 반복문의 삭제가 가능하며 복잡한 식을 단순하게 표현할 수 있습니다.

2. 지연연산 수행 - 람다는 지연연상을 수행함으로써 불필요한 연산을 최소화 할 수 있습니다.

3. 병렬처리 가능 - 멀티쓰레디를 활용하여 병렬처리를 사용 할 수 있습니다.
 
====================================================================================================

람다식의 단점

1. 람다식의 호출이 까다롭습니다

2. 람다 stream 사용 시 단순 for문 혹은 while문 사용 시 성능이 떨어집니다.

3. 불필요하게 너무 사용하게 되면 오히려 가독성을 떨어 뜨릴 수 있습니다.

*/